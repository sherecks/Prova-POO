Neste exemplo, a interface "FormaGeometrica" declara dois métodos abstratos: "calcularArea" e "calcularPerimetro".
Esses métodos não têm implementação, mas as classes que implementam essainterface precisam fornecer uma implementação para esses métodos.


//1° - Interface
public interface FormaGeometrica {
  double calcularArea();
  double calcularPerimetro();
}


//2°
public class Retangulo implements FormaGeometrica {
  private double base;
  private double altura;

  public Retangulo(double base, double altura) {
    this.base = base;
    this.altura = altura;
  }

  public double calcularArea() {
    return base * altura;
  }

  public double calcularPerimetro() {
    return 2 * (base + altura);
  }
}


Neste exemplo, a interface "Repositorio" é genérica e declara cinco métodos abstratos: "salvar", "atualizar", "deletar", "buscarPorId" e "buscarTodos".
Esses métodos são usados para definir as operações básicas que podem ser realizadas em um repositório de objetos de um determinado tipo T.
As classes que implementam essa interface precisam fornecer uma implementação para esses métodos,
que podem ser personalizados para o tipo T específico que está sendo armazenado. Por exemplo,
uma classe "RepositorioDeClientes" pode implementar a interface "Repositorio" para o tipo "Cliente":


//1° - Interface
public interface Repositorio<T> {
  void salvar(T objeto);
  void atualizar(T objeto);
  void deletar(T objeto);
  T buscarPorId(int id);
  List<T> buscarTodos();
}

//2°
public class RepositorioDeClientes implements Repositorio<Cliente> {
  private List<Cliente> clientes = new ArrayList<Cliente>();

  public void salvar(Cliente cliente) {
    clientes.add(cliente);
  }

  public void atualizar(Cliente cliente) {
    int index = clientes.indexOf(cliente);
    if (index != -1) {
      clientes.set(index, cliente);
    }
  }

  public void deletar(Cliente cliente) {
    clientes.remove(cliente);
  }

  public Cliente buscarPorId(int id) {
    for (Cliente cliente : clientes) {
      if (cliente.getId() == id) {
        return cliente;
      }
    }
    return null;
  }

  public List<Cliente> buscarTodos() {
    return clientes;
  }
}


